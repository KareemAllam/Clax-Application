// Dart & Other Pacakges
import 'dart:convert';
import 'package:clax/providers/Map.dart';
import 'package:clax/screens/MakeARide/Components/DriverInfo.dart';
import 'package:clax/screens/MakeARide/GoogleMap.dart';
import 'package:clax/screens/MakeARide/RideConfig.dart';
import 'package:clax/screens/Settings/Settings.dart';
import 'package:http/http.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
// Flutter Material Componenets
import 'package:flutter/material.dart';
// Models
import 'package:clax/models/Station.dart';
// Services
import 'package:clax/services/Backend.dart';
import 'package:clax/services/RealtimeDB.dart';

class CurrentTripProvider extends ChangeNotifier {
  // Setting App to Trip State so User can't make another tirp
  RealtimeDB db;
  String _requestId;
  GlobalKey<ScaffoldState> _scaffoldKey;

  /// driverId - driverInfo: {name: first-last, phone, img, car:{number,color}}
  Map<String, dynamic> currentDriverInfo = Map();

  /// "lindId" - "station" - "pricePerSeat" - "requiredSeats" - finalPrice - requestId
  Map<String, dynamic> currentTripInfo = Map();

  CurrentTripProvider() {
    init();
  }

  Future init() async {
    db = RealtimeDB();
    await cachedData();
  }

  Future cachedData() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    // If a trip is currentةly available
    if (_prefs.getString("driverInfo") != null)
      currentDriverInfo = json.decode(_prefs.getString("driverInfo"));

    if (_prefs.getString("tripInfo") != null)
      currentTripInfo = json.decode(_prefs.getString("tripInfo"));

    if (currentDriverInfo.length == 0 && currentTripInfo.length > 3) {
      startListeningToRequest();
    }
    notifyListeners();
  }

  /// "lindId" - "station" - "pricePerSeat" - "requiredSeats" - finalPrice
  void setTripInfo(Map<String, dynamic> keyValue) {
    currentTripInfo.addAll(keyValue);
    notifyListeners();
  }

  Future clearTripInfo() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    currentDriverInfo = Map();
    currentTripInfo = Map();
    _prefs.remove("tripInfo");
    _prefs.remove("driverInfo");
    notifyListeners();
  }

  /// Cancel a trip request recently made.
  Future cancelTripRequest() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    db.cancelReadAsync('clax-requests/$_requestId');
    currentTripInfo = Map();
    _prefs.remove("tripInfo");
    notifyListeners();
  }

  /// Send a trip request to the server.
  ///
  /// Returns a request Id generated by server.
  /// requestId is then used to listen to trip info in firebase
  Future<bool> searchingDriverState() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    // Preparing data for post request
    String endodeBody = json.encode({
      "lindId": currentTripInfo["lindId"],
      "requiredSeats": currentTripInfo['requiredSeats'],
      "stationLoc": {
        "lat": currentTripInfo['station']['coordinates'][0],
        "lng": currentTripInfo['station']['coordinates'][1]
      }
    });
    // TODO: شغله بالسيرفر
    // Trip Info Cached
    currentTripInfo['requestId'] = 'request123';
    _prefs.setString("tripInfo", json.encode(currentTripInfo));
    // Listen to changes for request
    startListeningToRequest();
    // Saving current trip info in cache
    return true;

    // Response res = await Api.post('/find-driver', endodeBody);
    // if (res.statusCode == 200) {
    //   // Retrieving request Id
    //   startListeningToRequest();
    //   return true;
    // }
    // // For showing snackbar error message.
    // else
    //   return false;
  }

  Future startListeningToRequest() async {
    // Listing to changes on RequestId
    _requestId = currentTripInfo['requestId'];
    db.readAsync('clax-requests/$_requestId', (value) {
      print(value);
      if (value['status'] == "meeting") {
        db.cancelReadAsync('clax-requests/$_requestId');
        // Navigator Propelry to another screen
        print("Driver id: ${value['driverId']} arrived!");
        getDriverInfo(value['driverId']);
      }
    });
  }

  void getDriverInfo(String driverId) async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    // TODO: شغله بالسيرفر
    // Response result = await Api.post("pairing/driver-info", driverId);
    // TODO: Assign it to currentDriverInfo
    // currentDriverInfo['driverInfo']= json.decode(result.body);
    currentDriverInfo = {
      "name": {"first": "Mohamed", "last": "Ahmed"},
      "phone": "0102485983",
      "img": "www.google.com/drivers/driver.png",
      "carInfo": {"number": "2314", "color": "red"}
    };
    currentDriverInfo['driverId'] = driverId;
    _prefs.setString('driver', json.encode(currentDriverInfo));
    notifyListeners();
    // Assign it to MapProvider's driverId
    Provider.of<MapProvider>(_scaffoldKey.currentContext, listen: false)
        .setDriverId(driverId, currentTripInfo['lindId']);
    // Navigator to Map
    if (!ModalRoute.of(_scaffoldKey.currentContext).isCurrent) {
      Navigator.of(_scaffoldKey.currentContext).popUntil((route) {
        if (route.settings.name == StartARide.routeName) return false;
        return true;
      });
    }
    Navigator.of(_scaffoldKey.currentContext).pushNamed(MapPage.routeName);
  }

  Future startTracking() async {
    // Retreieve Information First
    // Provider.of<MapProvider>(_scaffoldKey.currentContext).setDriverId=
  }

  // Getters
  bool get searching => currentTripInfo.length > 3;
  bool get onATrip => currentDriverInfo.length > 0;
  get clearCurrentTripInfo => currentTripInfo = Map();

  // Setters
  set setScaffoldKey(GlobalKey<ScaffoldState> scaffoldKey) =>
      _scaffoldKey = scaffoldKey;
}
