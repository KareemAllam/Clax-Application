// Dart & Other Pacakges
import 'dart:convert';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:http/http.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
// Flutter Material Componenets
import 'package:flutter/material.dart';
// Models
import 'package:clax/models/Car.dart';
import 'package:clax/models/Name.dart';
import 'package:clax/models/CurrentTrip.dart';
import 'package:clax/models/CurrentDriver.dart';
// Providers
import 'package:clax/providers/Map.dart';
// Screens
import 'package:clax/screens/MakeARide/GoogleMap.dart';
// Services
import 'package:clax/services/Backend.dart';
import 'package:clax/services/RealtimeDB.dart';
// Widgets
import 'package:clax/widgets/Notification.dart';

class CurrentTripProvider extends ChangeNotifier {
  // Setting App to Trip State so User can't make another tirp
  RealtimeDB db;
  GlobalKey<ScaffoldState> scaffoldKey;

  CurrentDriver currentDriverInfo;

  CurrentTrip currentTripInfo;

  CurrentTripProvider() {
    init();
  }

  Future init() async {
    db = RealtimeDB();
    await cachedData();
  }

  Future cachedData() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    // If a trip is currentةly available
    if (_prefs.getString("driverInfo") != null)
      currentDriverInfo =
          CurrentDriver.fromJson(json.decode(_prefs.getString("driverInfo")));

    if (_prefs.getString("tripInfo") != null)
      currentTripInfo =
          CurrentTrip.fromJson(json.decode(_prefs.getString("tripInfo")));

    if (currentDriverInfo != null) {
      startListeningToRequest();
    } else if (currentTripInfo != null) {
      startTracking();
    }
    notifyListeners();
  }

  Future clearTripInfo() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    currentTripInfo = null;
    currentDriverInfo = null;
    _prefs.remove("tripInfo");
    _prefs.remove("driverInfo");
    notifyListeners();
  }

  /// Cancel a trip request recently made.
  Future cancelTripRequest() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    String _requestId = currentTripInfo.requestId;
    db.cancelReadAsync('clax-requests/$_requestId');
    currentTripInfo = null;
    _prefs.remove("tripInfo");
    notifyListeners();
  }

  /// Send a trip request to the server.
  ///
  /// Returns a request Id generated by server.
  /// requestId is then used to listen to trip info in firebase
  Future<bool> searchingDriverState(
      CurrentTrip trip, int direction, LatLng destLoc) async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    // Preparing data for post request
    // TODO: شغله بالسيرفر
    Map<String, dynamic> encodedBody = {
      "lineId": trip.lindId,
      "requiredSeats": trip.seats,
      "pickupLoc": trip.pickupCoords,
      "destLoc": destLoc,
      "direction": direction,
    };
    Response response = await Api.post(
        'passengers/pairing/find-driver', json.encode(encodedBody));
    if (response.statusCode == 200) {
      // Retrieving request Id
      currentTripInfo = trip;
      currentTripInfo.requestId =
          response.body; // Listen to changes for request
      notifyListeners();
      startListeningToRequest();
      // Saving current trip info in cache
      return true;
    }
    // For showing snackbar error message.
    else
      return false;
  }

  Future startListeningToRequest() async {
    String lineId = currentTripInfo.lindId;
    String requestId = currentTripInfo.requestId;
    // Listing to changes on RequestId
    // db.readAsync('clax-requests/$lineId/$requestId', (value) {
    db.readAsync('b3d-ezn-raaed/$lineId/$requestId', (value) async {
      if (value['status'] == "meeting") {
        currentTripInfo.startDate = DateTime.now();

        db.cancelReadAsync('clax-requests/$requestId');
        // Navigator Propelry to another screen
        await getDriverInfo("value['driverId']");
      }
    });
  }

  Future getDriverInfo(String driverId) async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    // TODO: شغله بالسيرفر
    // Response result = await Api.post("pairing/driver-info", driverId);
    // currentDriverInfo['driverInfo']= json.decode(result.body);
    Map<String, dynamic> driverInfo = {
      "name": {"first": "Mohamed", "last": "Ahmed"},
      "phone": "0102485983",
      "img": "www.google.com/drivers/driver.png",
      "carInfo": {"plateNumber": "2314", "color": "red"}
    };

    currentDriverInfo = CurrentDriver(
        driverId: driverId,
        name: NameModel(
            first: driverInfo['name']['first'],
            last: driverInfo['name']['last']),
        car: Car(
            color: driverInfo['carInfo']['color'],
            plateNumber: driverInfo['carInfo']['plateNumber']),
        img: driverInfo['img'],
        phone: driverInfo['phone']);
    // Trip Info Cached
    _prefs.setString("tripInfo", json.encode(currentTripInfo.toJson()));
    _prefs.setString('driverInfo', json.encode(currentDriverInfo));
    notifyListeners();
    await startTracking();
  }

  Future startTracking() async {
    // String driverId = currentDriverInfo['driverId'];
    String driverId = "5e5667e3e781d4395c633b43";
    // Assign it to MapProvider's driverId
    Provider.of<MapProvider>(scaffoldKey.currentContext, listen: false)
        .setDriverId(driverId, currentTripInfo.lindId);

    showNotification(
      scaffoldKey.currentContext,
      "السائق في الطريق إليك",
      "اضغط لتتبع السائق",
      cb: () =>
          Navigator.of(scaffoldKey.currentContext).pushNamed(MapPage.routeName),
    );
    // // Navigator to Map
    // if (!ModalRoute.of(scaffoldKey.currentContext).isCurrent) {
    //   Navigator.of(scaffoldKey.currentContext).popUntil((route) {
    //     if (route.settings.name == StartARide.routeName) return false;
    //     return true;
    //   });
    // }
    // Navigator.of(scaffoldKey.currentContext).pushNamed(MapPage.routeName);

    // Fluttertoast.showToast(
    //   gravity: ToastGravity.TOP,
    //   msg: "السائق في الطريق إليك",
    //   backgroundColor: Colors.deepPurple,
    //   toastLength: Toast.LENGTH_LONG,
    // );
  }

  // Getters
  get clearCurrentTripInfo => currentTripInfo = null;
}
