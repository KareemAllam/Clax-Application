// Dart & Other Pacakges
import 'dart:convert';
import 'package:http/http.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
// Flutter Material Componenets
import 'package:flutter/material.dart';
// Models
import 'package:clax/models/Car.dart';
import 'package:clax/models/Name.dart';
import 'package:clax/models/Error.dart';
import 'package:clax/models/CurrentTrip.dart';
import 'package:clax/models/CurrentDriver.dart';
// Providers
import 'package:clax/providers/Map.dart';
// // Screens
import 'package:clax/screens/MakeARide/Components/DriverArrivedInfo.dart';
// import 'package:clax/screens/MakeARide/GoogleMap.dart';
// Services
import 'package:clax/services/Backend.dart';
import 'package:clax/services/GoogleApi.dart';
import 'package:clax/services/RealtimeDB.dart';
// Widgets
// import 'package:clax/widgets/Notification.dart';

class CurrentTripProvider extends ChangeNotifier {
  // Setting App to Trip State so User can't make another tirp
  RealtimeDB db;
  GlobalKey<ScaffoldState> scaffoldKey;

  CurrentDriver currentDriverInfo;

  CurrentTrip currentTripInfo;

  CurrentTripProvider() {
    init();
  }

  Future init() async {
    db = RealtimeDB();
    await cachedData();
  }

  Future cachedData() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();

    // If a trip is currently available
    if (_prefs.getString("tripInfo") != null &&
        _prefs.getString("driverInfo") != null) {
      currentTripInfo =
          CurrentTrip.fromJson(json.decode(_prefs.getString("tripInfo")));
      currentDriverInfo =
          CurrentDriver.fromJson(json.decode(_prefs.getString("driverInfo")));
      startTracking();
      notifyListeners();
    } else if (_prefs.getString("tripInfo") != null) {
      currentTripInfo =
          CurrentTrip.fromJson(json.decode(_prefs.getString("tripInfo")));
      startListeningToRequest();
      notifyListeners();
    }
  }

  Future clearTripInfo() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    currentTripInfo = null;
    currentDriverInfo = null;
    _prefs.remove("tripInfo");
    _prefs.remove("driverInfo");
    notifyListeners();
  }

  /// Cancel a trip request recently made.
  Future cancelTripRequest() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    String lineId = currentTripInfo.lindId;
    String requestId = currentTripInfo.requestId;
    // Listing to changes on RequestId
    db.updateChild('clax-requests/$lineId/$requestId', {"status": "cancel"});
    db.cancelReadAsync('clax-requests/$lineId/$requestId');
    currentTripInfo = null;
    _prefs.remove("tripInfo");
    notifyListeners();
  }

  /// Send a trip request to the server.
  ///
  /// Returns a request Id generated by server.
  /// requestId is then used to listen to trip info in firebase
  Future<ServerResponse> searchingDriverState(
      CurrentTrip trip, int direction, LatLng destLoc) async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();
    // Preparing data for post request
    Map<String, dynamic> encodedBody = {
      "lineId": trip.lindId,
      "requiredSeats": trip.seats,
      "pickupLoc": {
        "lat": trip.pickupCoords.latitude,
        "lng": trip.pickupCoords.longitude
      },
      "destLoc": {'lat': destLoc.latitude, 'lng': destLoc.longitude},
      "direction": direction,
      // "onlinePayment": trip.onlinePayment
    };

    Response response = await Api.post(
        'passengers/pairing/find-driver', json.encode(encodedBody),
        stringDynamic: true);

    if (response.statusCode == 200) {
      // Retrieving request Id
      currentTripInfo = trip;
      currentTripInfo.requestId = json.decode(response.body);
      // Saving current trip info in cache
      _prefs.setString("tripInfo", json.encode(currentTripInfo.toJson()));
      notifyListeners();
      // Listen to changes for request
      startListeningToRequest();
      return ServerResponse(status: true);
    }
    // For showing snackbar error message.
    else if (response.statusCode == 500)
      return ServerResponse(status: false, message: "لا يوجد سائق متاح حالياً");
    else
      return ServerResponse(
          status: false,
          message:
              "تعذر الوصول للخادم. تأكد من اتصالك بالانترنت و حاول مره اخرى");
  }

  Future startListeningToRequest() async {
    SharedPreferences _prefs = await SharedPreferences.getInstance();

    var _currentTripInfo = currentTripInfo;
    // if (currentTripInfo == null)
    //   currentTripInfo =
    //       CurrentTrip.fromJson(json.decode(_prefs.getString("tripInfo")));
    String lineId = _currentTripInfo.lindId;
    String requestId = _currentTripInfo.requestId;

    // Listing to changes on RequestId
    print('clax-requests/$lineId/$requestId');
    db.readAsync('clax-requests/$lineId/$requestId', (value) async {
      // print(value);
      // No Driver has accepted the request
      if (value['status'] == "refused") {
        cancelTripRequest();
        // TODO: Show notificaion
        showDialog(
            context: scaffoldKey.currentContext,
            builder: (context) => AlertDialog());
      }

      if (value['status'] == "pending_passenger") {
        // Driver Information
        Map body = {
          'tourId': value['_tour'],
          // TODO: Online Payment
          // 'onlinePayment': currentTripInfo.onlinePayment
        };
        Response result = await Api.post(
          "passengers/pairing/driver-info",
          body,
        );
        Map<String, dynamic> driverInfo = json.decode(result.body);
        // Calculate Time
        Map driver = await db.readOnce('clax-lines/$lineId/${value['_tour']}');
        LatLng driverLocaiton =
            LatLng(driver['loc']["lat"], driver['loc']["lng"]);
        Map distanceInfo =
            await getDuration(_currentTripInfo.pickupCoords, driverLocaiton);

        // Trip Confirmation
        driverInfo['duration'] = distanceInfo['duration']["text"];
        bool answer = await showDialog(
            context: scaffoldKey.currentContext,
            barrierDismissible: false,
            builder: (context) => DriverArrivedInfo(driverInfo));

        // User Refused the Driver
        if (!answer) {
          cancelTripRequest();
          db.updateChild('clax-requests/$lineId/$requestId',
              {'status': "passenger_cancelled"});
        }

        // User Accepted the Driver
        else {
          // Update Request State
          db.updateChild('clax-requests/$lineId/$requestId', {
            'cost': _currentTripInfo.finalCost,
            'expectedTime': distanceInfo['duration']["value"],
            'status': "confirmed"
          });

          // Update CurrentTrip with current date
          _currentTripInfo.startDate = DateTime.now();
          _prefs.setString("tripInfo", json.encode(_currentTripInfo.toJson()));

          // Update CurrentDriver with driver information
          currentDriverInfo = CurrentDriver(
              tourId: value['_tour'],
              name: NameModel.fromJson(driverInfo['name']),
              car: Car(
                  color: driverInfo['_currentCar']['color'],
                  plateNumber: driverInfo['_currentCar']['plateNumber']),
              profilePic: base64Decode(driverInfo['profilePic']['data']),
              phone: driverInfo['phone']);
          _prefs.setString('driverInfo', json.encode(currentDriverInfo));

          // Update Application State
          notifyListeners();

          // Start Tracking Driver
          startTracking();
        }
      }
    });
  }

  Future startTracking() async {
    String driverId = currentDriverInfo.tourId;

    if (currentTripInfo == null) {
      SharedPreferences _prefs = await SharedPreferences.getInstance();
      currentTripInfo =
          CurrentTrip.fromJson(json.decode(_prefs.getString("tripInfo")));
      notifyListeners();
    }

    // Starting Tracking Driver with ``driverId`` on line ``currentTripInfo.lindId``
    Provider.of<MapProvider>(scaffoldKey.currentContext, listen: false)
        .setDriverId(
            driverId, currentTripInfo.lindId, currentTripInfo.pickupCoords);

    // TODO: Show Local Notification
    // showNotification(
    //   scaffoldKey.currentContext,
    //   "السائق في الطريق إليك",
    //   "اضغط لتتبع السائق",
    //   cb: () =>
    //       Navigator.of(scaffoldKey.currentContext).pushNamed(MapPage.routeName),
    // );
    // // Navigator to Map
    // if (!ModalRoute.of(scaffoldKey.currentContext).isCurrent) {
    //   Navigator.of(scaffoldKey.currentContext).popUntil((route) {
    //     if (route.settings.name == StartARide.routeName) return false;
    //     return true;
    //   });
    // }
    // Navigator.of(scaffoldKey.currentContext).pushNamed(MapPage.routeName);

    // Fluttertoast.showToast(
    //   gravity: ToastGravity.TOP,
    //   msg: "السائق في الطريق إليك",
    //   backgroundColor: Colors.deepPurple,
    //   toastLength: Toast.LENGTH_LONG,
    // );
  }

  // Getters
  get clearCurrentTripInfo => currentTripInfo = null;
}
